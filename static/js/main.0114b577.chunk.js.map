{"version":3,"sources":["ColorModeSwitcher.tsx","Card.tsx","AccordionCard.tsx","App.tsx","calcQuestBond.ts","useLocalStorage.ts","calcBond.ts","calcAp.ts","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","Card","children","p","borderWidth","borderRadius","shadow","alignItems","spacing","AccordionCard","allowToggle","getLocalTime","date","Date","setMinutes","getMinutes","getTimezoneOffset","toISOString","slice","getInitialState","initialTime","initialSaintQuartz","initialAp","initialBond","maxAp","questAp","questBond","questBondBonus","questLap","totalQuestLap","saintQuartzAddition","QuestBondCalculator","setState","useState","questLv","bondBonus","portrait","localState","setLocalState","useDisclosure","isOpen","onOpen","onClose","handleChange","event","currentTarget","name","valueAsNumber","prevState","type","value","onChange","toString","parseInt","map","i","Math","floor","calcQuestBond","colorScheme","AddSaintQuartzPopover","saintQuartzToAdd","setSaintQuartzToAdd","saintQuartzAddInputRef","useRef","initialFocusRef","SmallAdd","ref","d","justifyContent","dashForNaN","isNaN","App","initialState","key","state","useEffect","json","localStorage","getItem","obj","JSON","parse","Object","prototype","call","stringify","setItem","useLocalStorage","currentTime","setCurrentTime","intervalId","setInterval","clearInterval","lap","apInputRef","React","paidAp","getTime","consumedSaintQuartz","ceil","finalApMax","finalSaintQuartz","finalApMin","calcAp","isLapTooLarge","finalBond","addSaintQuartz","theme","paddingBottom","onSubmit","preventDefault","as","my","href","isExternal","id","RepeatClock","align","m","isInvalid","status","px","marginTop","flexWrap","fontWeight","current","focus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0114b577.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Box, ChakraComponent, VStack } from '@chakra-ui/react'\nimport React from 'react'\n\nexport const Card: ChakraComponent<'div', {}> = ({ children }) => (\n  <Box p={5} borderWidth=\"thin\" borderRadius=\"md\" shadow=\"md\">\n    <VStack alignItems=\"stretch\" spacing={5}>\n      {children}\n    </VStack>\n  </Box>\n)\n","import {\n  Accordion,\n  AccordionProps,\n  Box,\n  ComponentWithAs,\n} from '@chakra-ui/react'\nimport React from 'react'\n\nexport const AccordionCard: ComponentWithAs<'div', AccordionProps> = ({\n  children,\n}) => (\n  <Box borderWidth=\"thin\" borderRadius=\"md\" shadow=\"md\">\n    <Accordion allowToggle>{children}</Accordion>\n  </Box>\n)\n","import React from 'react'\nimport {\n  ChakraProvider,\n  theme,\n  FormControl,\n  FormLabel,\n  Input,\n  Container,\n  Flex,\n  Box,\n  Heading,\n  VStack,\n  StatGroup,\n  StatLabel,\n  StatNumber,\n  Stat,\n  HStack,\n  Button,\n  FormHelperText,\n  Text,\n  Alert,\n  AlertIcon,\n  AccordionItem,\n  AccordionButton,\n  AccordionIcon,\n  AccordionPanel,\n  InputRightElement,\n  InputGroup,\n  IconButton,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverHeader,\n  PopoverBody,\n  ButtonGroup,\n  Stack,\n  useDisclosure,\n  InputLeftAddon,\n  InputRightAddon,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  ModalCloseButton,\n  ModalHeader,\n  Radio,\n  RadioGroup,\n  Badge,\n  OrderedList,\n  ListItem,\n  Link,\n} from '@chakra-ui/react'\nimport { RepeatClockIcon, SmallAddIcon } from '@chakra-ui/icons'\nimport { ColorModeSwitcher } from './ColorModeSwitcher'\nimport { useLocalStorage } from './useLocalStorage'\nimport {\n  Dispatch,\n  FormEventHandler,\n  SetStateAction,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport { calcAp } from './calcAp'\nimport { Card } from './Card'\nimport { calcBond } from './calcBond'\nimport { calcQuestBond } from './calcQuestBond'\nimport { AccordionCard } from './AccordionCard'\n\ntype State = {\n  initialTime: string\n  initialSaintQuartz: number\n  initialAp: number\n  initialBond: number\n  maxAp: number\n  questAp: number\n  questBond: number\n  questBondBonus: number\n  questLap: number\n  totalQuestLap: number\n  saintQuartzAddition: number\n}\n\nconst getLocalTime = () => {\n  const date = new Date()\n  date.setMinutes(date.getMinutes() - date.getTimezoneOffset())\n  return date.toISOString().slice(0, -8)\n}\n\nconst getInitialState = (): State => ({\n  initialTime: getLocalTime(),\n  initialSaintQuartz: 0,\n  initialAp: 0,\n  initialBond: 0,\n  maxAp: 144,\n  questAp: 20,\n  questBond: 0,\n  questBondBonus: 0,\n  questLap: 0,\n  totalQuestLap: 0,\n  saintQuartzAddition: 0,\n})\n\nconst QuestBondCalculator = ({\n  setState,\n}: {\n  setState: Dispatch<SetStateAction<State>>\n}) => {\n  const initialLocalState = { questLv: 0, bondBonus: 0, portrait: 0 }\n  const [localState, setLocalState] = useState(initialLocalState)\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const handleChange: FormEventHandler<HTMLInputElement> = (event) => {\n    const { name, valueAsNumber } = event.currentTarget\n    setLocalState((prevState) => ({ ...prevState, [name]: valueAsNumber }))\n  }\n  const onConfirm = () => {\n    setState((prevState) => ({ ...prevState, ...calcQuestBond(localState) }))\n    onClose()\n  }\n\n  return (\n    <>\n      <Button onClick={onOpen}>推奨レベルと絆ボーナスから計算</Button>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>獲得絆ポイントを計算する</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <VStack>\n              <FormControl>\n                <FormLabel>クエスト推奨レベル</FormLabel>\n                <Input\n                  type=\"number\"\n                  name=\"questLv\"\n                  value={localState.questLv}\n                  onChange={handleChange}\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel>絆ボーナス</FormLabel>\n                <InputGroup>\n                  <Input\n                    type=\"number\"\n                    name=\"bondBonus\"\n                    value={localState.bondBonus}\n                    onChange={handleChange}\n                  />\n                  <InputRightAddon>%</InputRightAddon>\n                </InputGroup>\n              </FormControl>\n              <FormControl>\n                <FormLabel>英霊肖像</FormLabel>\n                <RadioGroup\n                  name=\"portrait\"\n                  value={localState.portrait.toString()}\n                  onChange={(value) => {\n                    setLocalState((prevState) => ({\n                      ...prevState,\n                      portrait: parseInt(value),\n                    }))\n                  }}\n                >\n                  <HStack>\n                    {[0, 1, 2].map((i) => (\n                      <Radio key={i} value={(i * 50).toString()}>\n                        {i}枚\n                      </Radio>\n                    ))}\n                  </HStack>\n                </RadioGroup>\n              </FormControl>\n              <ButtonGroup>\n                <Button onClick={onClose}>キャンセル</Button>\n                <Button onClick={onConfirm} colorScheme=\"twitter\">\n                  決定\n                </Button>\n              </ButtonGroup>\n            </VStack>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n\nconst AddSaintQuartzPopover = ({\n  setState,\n}: {\n  setState: Dispatch<SetStateAction<State>>\n}) => {\n  const [saintQuartzToAdd, setSaintQuartzToAdd] = useState(0)\n  const saintQuartzAddInputRef = useRef<HTMLInputElement>(null)\n  const { onOpen, onClose, isOpen } = useDisclosure()\n\n  const addSaintQuartz = () => {\n    setState((prevState) => ({\n      ...prevState,\n      saintQuartzAddition: prevState.saintQuartzAddition + saintQuartzToAdd,\n    }))\n    onClose()\n  }\n\n  return (\n    <Popover\n      isOpen={isOpen}\n      onOpen={onOpen}\n      onClose={onClose}\n      initialFocusRef={saintQuartzAddInputRef}\n    >\n      <PopoverTrigger>\n        <IconButton aria-label=\"聖晶石を追加\" icon={<SmallAddIcon />} />\n      </PopoverTrigger>\n      <PopoverContent>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader>聖晶石を追加</PopoverHeader>\n        <PopoverBody>\n          <Stack>\n            <Input\n              type=\"number\"\n              value={saintQuartzToAdd}\n              onChange={(event) => {\n                setSaintQuartzToAdd(event.currentTarget.valueAsNumber)\n              }}\n              ref={saintQuartzAddInputRef}\n            />\n            <ButtonGroup d=\"flex\" justifyContent=\"flex-end\">\n              <Button onClick={onClose}>キャンセル</Button>\n              <Button onClick={addSaintQuartz} colorScheme=\"twitter\">\n                決定\n              </Button>\n            </ButtonGroup>\n          </Stack>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nconst dashForNaN = (value: number) => (isNaN(value) ? '―' : value)\n\nexport const App = (): JSX.Element => {\n  const initialState = getInitialState()\n  const [state, setState] = useLocalStorage('state', initialState)\n  const [currentTime, setCurrentTime] = useState(new Date())\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentTime(new Date())\n    }, 5 * 60 * 1000)\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [])\n\n  const apInputRef = React.useRef<HTMLInputElement>(null)\n\n  const { finalSaintQuartz, finalApMin, finalApMax } = calcAp(\n    new Date(state.initialTime),\n    currentTime,\n    state.initialSaintQuartz + state.saintQuartzAddition,\n    state.initialAp,\n    state.maxAp,\n    state.questAp,\n    state.questLap\n  )\n\n  const isLapTooLarge = finalApMax - finalApMin >= state.questAp\n\n  const finalBond = calcBond(\n    state.initialBond,\n    state.questBond,\n    state.questBondBonus,\n    state.questLap\n  )\n\n  const handleChange: FormEventHandler<HTMLInputElement> = (event) => {\n    const name = event.currentTarget.name as keyof typeof initialState\n    const value =\n      typeof initialState[name] == 'number'\n        ? event.currentTarget.valueAsNumber\n        : event.currentTarget.value\n    setState((prevState) => ({ ...prevState, [name]: value }))\n  }\n\n  const addSaintQuartz: React.MouseEventHandler<HTMLButtonElement> = (\n    event\n  ) => {\n    const value = parseInt(event.currentTarget.value)\n    setState((prevState) => ({\n      ...prevState,\n      saintQuartzAddition: prevState.saintQuartzAddition + value,\n    }))\n  }\n\n  const addLap = () => {\n    setState((prevState) => ({\n      ...prevState,\n      initialTime: getLocalTime(),\n      initialSaintQuartz: finalSaintQuartz,\n      initialAp: finalApMax,\n      initialBond: finalBond,\n      saintQuartzAddition: 0,\n      totalQuestLap: prevState.totalQuestLap + prevState.questLap,\n    }))\n    setCurrentTime(new Date())\n    if (apInputRef.current != null) {\n      apInputRef.current.focus()\n    }\n  }\n\n  const resetTime = () => {\n    setState((prevState) => ({ ...prevState, initialTime: getLocalTime() }))\n    setCurrentTime(new Date())\n  }\n\n  const resetLap = () => {\n    setState((prevState) => ({ ...prevState, totalQuestLap: 0 }))\n  }\n\n  const resetAll = () => {\n    setState(getInitialState())\n    setCurrentTime(new Date())\n  }\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Container paddingBottom={20}>\n        <form\n          onSubmit={(event) => {\n            event.preventDefault()\n          }}\n        >\n          <VStack alignItems=\"stretch\">\n            <HStack justifyContent=\"space-between\">\n              <Heading as=\"h1\" my={5}>\n                FGO 石割計算機\n              </Heading>\n              <ColorModeSwitcher />\n            </HStack>\n            <Text>目標周回数に達したときの聖晶石所持数とAPを計算します。</Text>\n            <AccordionCard>\n              <AccordionItem>\n                <h2>\n                  <AccordionButton>\n                    <Box>使い方</Box>\n                    <AccordionIcon marginLeft=\"auto\" />\n                  </AccordionButton>\n                </h2>\n                <AccordionPanel>\n                  <OrderedList spacing={3}>\n                    <ListItem>\n                      戦利品のスクリーンショットを忘れずに撮影しましょう。\n                    </ListItem>\n                    <ListItem>\n                      計算機に情報を入力します。APの誤差を抑えるため、周回数は100周またはそれ以下を推奨します。\n                    </ListItem>\n                    <ListItem>\n                      目標回数だけ周回したときの聖晶石所持数とAPが出ます。\n                    </ListItem>\n                    <ListItem>\n                      周回を始めます。APは自然回復込みで計算されるので、ある程度周回したらブラウザで再度確認してください。\n                    </ListItem>\n                    <ListItem>\n                      聖晶石召喚を行って聖晶石を消費したときや、絆レベルアップボーナスやログインボーナスで聖晶石を受け取ったときは必ず「周回中の聖晶石増減」に記録してください。記録を忘れるとカウントが破綻します。\n                    </ListItem>\n                    <ListItem>\n                      APが溢れた状態で時間が経つと周回数がずれますのでご注意ください。\n                    </ListItem>\n                    <ListItem>\n                      APが計算結果の範囲内になったら目標達成です。さらに周回する場合は、「周回を継続する」ボタンを押すと入力内容が現在の状態に書き換えられ、続けて周回できるようになります。APは誤差があるので、実際の値に書き換えてください。\n                    </ListItem>\n                    <ListItem>\n                      検証用に累計絆ポイントを使って周回数を確かめることもできます。\n                    </ListItem>\n                    <ListItem>\n                      お疲れさまでした。アイテム獲得数の計算、周回報告には\n                      <Link\n                        href=\"https://fgosccalc.max747.org/\"\n                        isExternal\n                        color=\"blue.500\"\n                      >\n                        fgosccalc\n                      </Link>\n                      の利用をおすすめします。\n                    </ListItem>\n                  </OrderedList>\n                </AccordionPanel>\n              </AccordionItem>\n            </AccordionCard>\n            <Card>\n              <fieldset>\n                <VStack alignItems=\"stretch\">\n                  <FormLabel as=\"legend\" fontSize=\"xl\">\n                    周回開始時の状態\n                  </FormLabel>\n                  <FormControl id=\"initial-time\">\n                    <FormLabel>時刻</FormLabel>\n                    <InputGroup>\n                      <Input\n                        type=\"datetime-local\"\n                        name=\"initialTime\"\n                        value={state.initialTime}\n                        onChange={handleChange}\n                      />\n                      <InputRightElement>\n                        <IconButton\n                          aria-label=\"現在時刻を更新\"\n                          icon={<RepeatClockIcon />}\n                          onClick={resetTime}\n                        />\n                      </InputRightElement>\n                    </InputGroup>\n                  </FormControl>\n                  <FormControl id=\"initial-saint-quartz\">\n                    <FormLabel>聖晶石所持数</FormLabel>\n                    <Input\n                      type=\"number\"\n                      name=\"initialSaintQuartz\"\n                      value={state.initialSaintQuartz}\n                      onChange={handleChange}\n                    />\n                  </FormControl>\n                  <FormControl id=\"initial-ap\">\n                    <FormLabel>AP</FormLabel>\n                    <Flex align=\"center\">\n                      <Input\n                        type=\"number\"\n                        name=\"initialAp\"\n                        value={state.initialAp}\n                        onChange={handleChange}\n                        ref={apInputRef}\n                      />\n                      <Box m=\"1\" fontSize=\"xl\">\n                        /\n                      </Box>\n                      <Input\n                        type=\"number\"\n                        name=\"maxAp\"\n                        value={state.maxAp}\n                        onChange={handleChange}\n                      />\n                    </Flex>\n                  </FormControl>\n                </VStack>\n              </fieldset>\n            </Card>\n            <Card>\n              <fieldset>\n                <VStack alignItems=\"stretch\">\n                  <FormLabel as=\"legend\" fontSize=\"xl\">\n                    クエスト情報\n                  </FormLabel>\n                  <FormControl id=\"quest-ap\">\n                    <FormLabel>消費AP</FormLabel>\n                    <Input\n                      type=\"number\"\n                      name=\"questAp\"\n                      value={state.questAp}\n                      onChange={handleChange}\n                    />\n                  </FormControl>\n                  <FormControl id=\"quest-lap\">\n                    <FormLabel>周回予定数</FormLabel>\n                    <Input\n                      type=\"number\"\n                      name=\"questLap\"\n                      value={state.questLap}\n                      onChange={handleChange}\n                      isInvalid={isLapTooLarge}\n                    />\n                    {isLapTooLarge && (\n                      <FormHelperText>\n                        <Alert status=\"warning\" borderRadius=\"md\">\n                          <AlertIcon />\n                          周回数が大きすぎます。絆カウントを併用するか、周回数を100周程度に分割して、「周回を継続する」ボタンを使って少しずつ計測するようにしてください。\n                        </Alert>\n                      </FormHelperText>\n                    )}\n                  </FormControl>\n                </VStack>\n              </fieldset>\n            </Card>\n            <AccordionCard>\n              <AccordionItem>\n                <h2>\n                  <AccordionButton>\n                    <Box>絆カウント</Box>\n                    <Badge>任意</Badge>\n                    <AccordionIcon marginLeft=\"auto\" />\n                  </AccordionButton>\n                </h2>\n                <AccordionPanel px={5}>\n                  <VStack alignItems=\"stretch\">\n                    <FormControl>\n                      <FormLabel>開始時の累計絆ポイント</FormLabel>\n                      <Input\n                        type=\"number\"\n                        name=\"initialBond\"\n                        value={state.initialBond}\n                        onChange={handleChange}\n                      />\n                    </FormControl>\n                    <FormControl>\n                      <FormLabel>獲得絆ポイント</FormLabel>\n                      <HStack>\n                        <Input\n                          type=\"number\"\n                          name=\"questBond\"\n                          value={state.questBond}\n                          onChange={handleChange}\n                        />\n                        <InputGroup>\n                          <InputLeftAddon>+</InputLeftAddon>\n                          <Input\n                            type=\"number\"\n                            name=\"questBondBonus\"\n                            value={state.questBondBonus}\n                            onChange={handleChange}\n                          />\n                        </InputGroup>\n                      </HStack>\n                    </FormControl>\n                    <QuestBondCalculator setState={setState} />\n                  </VStack>\n                </AccordionPanel>\n              </AccordionItem>\n            </AccordionCard>\n            <Card>\n              <FormControl id=\"saint-quartz-addition\">\n                <FormLabel>周回中の聖晶石増減</FormLabel>\n                <Input\n                  type=\"number\"\n                  name=\"saintQuartzAddition\"\n                  value={state.saintQuartzAddition}\n                  onChange={handleChange}\n                />\n                <ButtonGroup marginTop={3} flexWrap=\"wrap\">\n                  {[-1, 1, 2, 3].map((value) => (\n                    <Button value={value} onClick={addSaintQuartz} key={value}>\n                      {value > 0 ? '+' : ''}\n                      {value}\n                    </Button>\n                  ))}\n                  <AddSaintQuartzPopover setState={setState} />\n                </ButtonGroup>\n                <FormHelperText>\n                  聖晶石召喚を行ったとき、絆レベルアップ報酬やログインボーナスを受け取ったときは忘れず記録してください。\n                </FormHelperText>\n              </FormControl>\n            </Card>\n            <Card>\n              <Heading fontSize=\"xl\" fontWeight=\"medium\">\n                計算結果\n              </Heading>\n              <StatGroup>\n                <Stat>\n                  <StatLabel>累計周回数</StatLabel>\n                  <StatNumber>\n                    {dashForNaN(state.totalQuestLap + state.questLap)}\n                  </StatNumber>\n                </Stat>\n                <Stat>\n                  <StatLabel>聖晶石所持数</StatLabel>\n                  <StatNumber>{dashForNaN(finalSaintQuartz)}</StatNumber>\n                </Stat>\n                <Stat>\n                  <StatLabel>AP</StatLabel>\n                  <StatNumber>\n                    {dashForNaN(finalApMin)} ~ {dashForNaN(finalApMax)}\n                  </StatNumber>\n                </Stat>\n              </StatGroup>\n              {!isNaN(finalBond) && finalBond > 0 && (\n                <Stat>\n                  <StatLabel>累計絆ポイント</StatLabel>\n                  <StatNumber>{finalBond}</StatNumber>\n                </Stat>\n              )}\n            </Card>\n            <Button onClick={addLap} colorScheme=\"twitter\">\n              周回を継続する\n            </Button>\n            <Button onClick={resetLap}>累計周回数をリセット</Button>\n            <Button onClick={resetAll}>入力内容をすべてリセット</Button>\n          </VStack>\n        </form>\n      </Container>\n    </ChakraProvider>\n  )\n}\n","export const calcQuestBond = ({\n  questLv,\n  bondBonus,\n  portrait,\n}: {\n  questLv: number\n  bondBonus: number\n  portrait: number\n}): { questBond: number; questBondBonus: number } => ({\n  questBond: questLv * 10 + 15,\n  questBondBonus: Math.floor(\n    (questLv * 10 + 15) * (bondBonus / 100) + portrait\n  ),\n})\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\nexport const useLocalStorage = <T>(\n  key: string,\n  initialState: T\n): [T, Dispatch<SetStateAction<T>>] => {\n  const [state, setState] = useState(initialState)\n  useEffect(() => {\n    const json = localStorage.getItem(key)\n    if (json) {\n      const obj = JSON.parse(json)\n      if (\n        typeof initialState == 'object' &&\n        Object.prototype.toString.call(initialState) == '[object Object]'\n      ) {\n        setState({ ...initialState, ...obj })\n      } else {\n        setState(obj)\n      }\n    }\n  }, [])\n  useEffect(() => {\n    const json = JSON.stringify(state)\n    localStorage.setItem(key, json)\n  }, [state])\n  return [state, setState]\n}\n","export const calcBond = (\n  initialBond: number,\n  questBond: number,\n  questBondBonus: number,\n  lap: number\n): number =>\n  initialBond + (questBond + (isNaN(questBondBonus) ? 0 : questBondBonus)) * lap\n","export const calcAp = (\n  initialTime: Date,\n  currentTime: Date,\n  initialSaintQuartz: number,\n  initialAp: number,\n  maxAp: number,\n  questAp: number,\n  lap: number\n): { finalSaintQuartz: number; finalApMin: number; finalApMax: number } => {\n  const consumedAp = questAp * lap\n  const reocoveredAp = Math.floor(\n    (currentTime.getTime() - initialTime.getTime()) / (1000 * 60 * 5)\n  )\n  const paidAp = consumedAp - initialAp - reocoveredAp\n  const consumedSaintQuartz = Math.ceil(paidAp / maxAp)\n  const finalApMax = (maxAp - (paidAp % maxAp)) % maxAp\n  const finalApMin = finalApMax - consumedSaintQuartz\n  const finalSaintQuartz = initialSaintQuartz - consumedSaintQuartz\n  return { finalSaintQuartz, finalApMin, finalApMax }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}